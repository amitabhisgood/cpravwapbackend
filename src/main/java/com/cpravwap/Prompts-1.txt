I have mysql database cprst running in localhost. I have a csv file "NIFTY 3rd OCT 26500 CE (20240927).csv" in 
(E:\backups2024\Java\cpravwapbe) folder. 
This file has stock price data in following format (Date,Open,High,Low,Close,Pivot,Resistance 1,Support 1,Resistance 2,Support 2,Resistance 3,Support 3,CPR Pivot,CPR BC,CPR TC)
I want a java code to update these records of cprstjava. The table "D270924java" should be created and the data should be stored in that table.
Please give me the code.
~
~~~~~
This pom.xml is working fine as standalong commandline based spring boot app. 
What changes have to be made to make is web enabled as well?
~~

<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.cpavwapbe</groupId>
    <artifactId>cpravwapbe</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>jar</packaging>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.2.0</version> <!-- Use the latest stable version -->
    </parent>
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>21</maven.compiler.source>
        <maven.compiler.target>21</maven.compiler.target>
        <!-- Optional: Define MySQL driver version if not using Spring Boot's dependency management -->
        <mysql.connector.version>8.0.34</mysql.connector.version>
        <start-class>com.cpravwap.Cpravwapbe</start-class>
        <exec.mainClass>com.cpravwap.Cpravwapbe</exec.mainClass>
    </properties>
    <!-- Dependencies -->
    <dependencies>
        <!-- Spring Boot Starter Web: For building web applications, including RESTful services -->
<!--        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
        </dependency>

        <!-- Spring Boot Starter Data JPA: For JPA and Hibernate support -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>

        <!-- MySQL Connector/J: JDBC driver for MySQL -->
        <dependency>
            <groupId>com.mysql</groupId>
            <artifactId>mysql-connector-j</artifactId>
            <version>8.0.33</version>
        </dependency>

        <!-- Optional: Spring Boot Starter Validation: For input validation -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>

        <!-- Optional: Lombok: To reduce boilerplate code (getters/setters) -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.34</version>
            <type>jar</type>
        </dependency>

        <!-- Optional: Spring Boot DevTools: For development-time features -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>

        <!-- Optional: Testing Dependencies -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.opencsv</groupId>
            <artifactId>opencsv</artifactId>
            <version>5.9</version>
            <type>jar</type>
        </dependency>
    </dependencies>
    <!-- Build Plugins -->
    <build>
        <plugins>
            <!-- Spring Boot Maven Plugin: Enables packaging and running Spring Boot applications -->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- Maven Compiler Plugin: Compiles Java source code -->
            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>21</source>
                    <target>21</target>
                    <compilerArgs>
                    </compilerArgs>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <!-- Repository Configuration (Optional) -->
    <repositories>
        <repository>
            <id>central</id>
            <name>Maven Central Repository</name>
            <url>https://repo.maven.apache.org/maven2</url>
            <releases>
                <enabled>true</enabled>
            </releases>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>
    </repositories>

    <!-- Dependency Management (Optional if relying on parent) -->
    <dependencyManagement>
        <dependencies>
            <!-- You can manage dependency versions here if needed -->
        </dependencies>
    </dependencyManagement>
</project>

~~
This application.properties file works fine in commandline application mode.
Now I have make this web-enabled as well. What changes have to be made?
~~

# Database Configuration (if applicable)
# spring.datasource.url=jdbc:mysql://localhost:3306/cprst?useSSL=false&serverTimezone=UTC
spring.datasource.url=jdbc:mysql://localhost:3306/cprst
spring.datasource.username=root
spring.datasource.password=acite1234
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# JPA Configuration (if applicable)
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect

# Logging Configuration
logging.level.org.springframework=INFO
logging.level.com.cpravwap=DEBUG

~~~~~
This code has to be modified to make it as Controller to handle /api/ohlc-data.
It should return JSON object in format given further below.
~
package com.cpravwap.controller;

/**
 *
 * @author Amitabh Choudhury
 */
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class OHLCDataretriever {
    
    @GetMapping("api/ohlc-data")
    public String ohlcData() {
    // [{ time: 'timestamp', open: 123, high: 150, low: 120, close: 130, cpr: 128, pivot: 129, pivotHigh: 132, pivotLow: 125, anchorVWAP: 130 }]
        return "Hello, World!";
    }
}

~
JSON format
~
[{ time: 'timestamp', open: 123, high: 150, low: 120, close: 130, cpr: 128, pivot: 129, pivotHigh: 132, pivotLow: 125, anchorVWAP: 130 }]

~
Give me modified code only additional code. If addtional code is required then describe the code required but no need to give code.
~~~~~
This is the main class of the springboot app. At present it is working as commandline app. This has to be converted to app that also handles web calls. I have prepared the Controller. This class has to be modified. 
After the application is started, it should ask if the application should run as commandline or web or both. if both or commandline is selected it should as if the database has to be updated. 
It should should start web by default. If answer is yes then it should be update the database. Default is both. Give me modified code.
~

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 */

package com.cpravwap;

/**
 *
 * @author Amitabh Choudhury
 */

import com.cpravwap.service.CsvService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.ComponentScan;

@SpringBootApplication
@ComponentScan(basePackages = "com.cpravwap.service.CsvService")
public class Cpravwapbe implements CommandLineRunner {
    @Autowired
    private CsvService csvService;
    public static void main(String[] args) {
        System.out.println("Hello World! from Cpravwapbe.");
        SpringApplication.run(Cpravwapbe.class, args);
    }
    @Override
    public void run(String... args) throws Exception {
        System.out.println("In Cpravwapbe run");
        csvService.parseAndSaveCsv();
        System.out.println("Out of Cpravwapbe run");
    }
}

~
